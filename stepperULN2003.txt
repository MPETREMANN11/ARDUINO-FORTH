\ *********************************************************************
\ Controlling a 28BYJ motor with the ULN2003 driver                   *
\    Filename:      stepperULN2003.txt                                *
\    Date:          27.10.2020                                        *
\    Updated:       28.10.2020                                        *
\    File Version:  1.0                                               *
\    MCU:           ARDUINO all models                                *
\    GNU General Public License                                       *
\    FF Version:    5.0                                               *                                *
\    Forth Author:  Marc PETREMANN                                    *
\ *********************************************************************

\ ** part off pinsDefinitions.txt *************************
\ source: https://github.com/MPETREMANN11/ARDUINO-FORTH/blob/master/pinsDefinitions.txt

-defPIN
marker -defPIN

: defPIN: ( PORTx mask --- <word> | <word> --- mask port)
    create
        c, c,           \ compile PORT and pin mask
    does>
        dup c@          \ push pin mask
        swap 1+ c@      \ push PORT
  ;

\ Turn a pin on, dont change others
: high ( pinmask portadr -- )
    mset
  ;

\ Turn a pin off, dont change others
: low ( pinmask portadr -- )
    mclr
  ;

\ Only for PORTx bits
\ address of DDRx is one less than address of PORTx

\ Set DDRx so its corresponding pin is output.
: output ( pinmask portadr -- )
    1- high
  ;

\ Set DDRx so its corresponding pin is input. --- unused
\ : input  ( pinmask portadr -- )
\     1- low
\   ;

\ ** end part of pinsDefinitions.txt **********************

-stepper
marker -stepper

decimal
flash
43 constant PORTD
PORTD %00000100 defPIN: IN1 \   blue wire motor
PORTD %00001000 defPIN: IN2 \   pink wire motor
PORTD %00010000 defPIN: IN3 \ yellow wire motor
PORTD %00100000 defPIN: IN4 \ orange wire motor
ram

: init.stepper ( ---)
    IN1 output
    IN2 output
    IN3 output
    IN4 output
  ;

\ true  for Clock Wise direction
\ false for Counter Clock Wise direction
true value DIRECTION \ not used

\ pulse delay
2 value pulseDelay 

:noname  \ step 7
    IN4 high  IN3 low   IN2 low   IN1 high ;
:noname  \ step 6
    IN4 low   IN3 low   IN2 low   IN1 high ;
:noname  \ step 5
    IN4 low   IN3 low   IN2 high  IN1 high ;
:noname  \ step 4
    IN4 low   IN3 low   IN2 high  IN1 low  ;
:noname  \ step 3
    IN4 low   IN3 high  IN2 high  IN1 low  ;
:noname  \ step 2
    IN4 low   IN3 high  IN2 low   IN1 low  ;
:noname  \ step 1
    IN4 high  IN3 high  IN2 low   IN1 low  ;
:noname  \ step 0
    IN4 high  IN3 low   IN2 low   IN1 low  ;
flash
create 'PULSES
    , , , , , , , ,
ram

\ index pointing in 'PULSES 
0 value currentPulse

-cycles
marker -cycles

\ send one pulse to A4988
: execPulse ( ---)
    currentPulse 2* \ convert pointer in addr offset
    'PULSES + @     \ extract cfa of noname definition
    execute         \ execute nonamed definition 
    pulseDelay ms
  ;

\ send 8 pulses to A4988 in CW direction
: cycleCW ( ---)
    0 to currentPulse
    8 for
        execPulse
        currentPulse 1+ to currentPulse
    next
  ;

\ send 8 pulses to A4988 in CCW direction
: cycleCCW ( ---)
    7 to currentPulse
    8 for
        execPulse
        currentPulse 1- to currentPulse
    next
  ;

defer cycles

: setDirection ( n ---)
    0<
    if      ['] cycleCCW is cycles
    else    ['] cycleCW  is cycles
    then
  ;

0 value statePORTD

: PORTDdown ( ---)
    PORTD c@ to statePORTD
    0 PORTD c!
  ;

: PORTDrestore ( ---)
    statePORTD PORTD c!
  ;

: steps ( n ---)
    PORTDrestore
    dup setDirection
    abs
    for
        cycles
    next
    PORTDdown
  ;



\ test stepper motor
init.stepper
200 steps

