\ *********************************************************************
\ Manage button by interrupt for On/Off - work in progress
\    Filename:      buttonOnOffInterrupt.txt
\    Date:          23/05/2020
\    Updated:       29/05/2020
\    File Version:  1.0
\    MCU:           ARDUINO all models
\    Copyright:     Marc PETREMANN
\    Author:        Marc PETREMANN
\    GNU General Public License
\ *********************************************************************

: defPIN: ( PORTx mask --- <word> | <word> --- mask port)
    create
        c, c,           \ compile PORT and min mask
    does>
        dup c@          \ push pin mask
        swap 1+ c@      \ push PORT
  ;

\ PORT B
37 constant PORTB	\ Port B Data Register
\ 36 constant DDRB	\ Port B Data Direction Register
\ 35 constant PINB	\ Port B Input Pins

\ PORT D
43 constant PORTD	\ Port D Data Register
\ 42 constant DDRD	\ Port D Data Direction Register
\ 41 constant PIND	\ Port D Input Pins

\ convert PORT addr to DDR address
: >ddr ( addr1 ---  addr1-1 )
    1- ;

\ convert PORT addr to Port INput address
: >pin ( addr1 ---  addr1-2 )
    2 - ;

eeprom
\ PB5 on Arduino NANO
PORTB %00100000 defPIN: LED
\ PB7 on Arduino MEGA
\ PORTB %10000000 defPIN: LED
\ PD2 on Arduino NANO
PORTD %00000100 defPIN: BUTTON
\ PD0 on Arduino MEGA
\ PORTD %00000001 defPIN: BUTTON
flash

: init.ports ( ---)
    LED >ddr mset    \ set PB5 for output
  ;

: LED.on ( ---)
    LED mset ;
: LED.off ( ---)
    LED mclr ;
: LED.toggle ( ---)
    LED mtst
    if      LED.off
    else    LED.on
    then ;

: button? ( --- fl)
    BUTTON >pin mtst    \ test if button is pressed
    if      true        \ button pressed
    else    false  then \ button released
  ;

\ only for test
\ : button.action ( ---)
\     BUTTON?
\     if
\         LED.toggle
\     then
\   ;

\ EXTERNAL_INTERRUPT
$69 constant EICRA	\ External Interrupt Control Register A
\ $3c constant EIFR	\ External Interrupt Flag Register
$3d constant EIMSK	\ External Interrupt Mask Register

eeprom
$0002 constant INT0Addr \ interrupt addr for INT0
flash

: init.interrupt ( ---)
    %00000011 EICRA mset    \ interrupt on rising edge
    %00000001 EIMSK mset    \ activate INT0
  ;


: tempo ( ---)
   3000 for next ;
  
: int-action ( ---)
    di  \ disable interrupt
    tempo
    LED.toggle
    tempo
    ei
  ;i

: int-enable ( ---)
    ['] int-action INT0Addr int!
    ei                  \ ei = Enable Interrupt
  ;

init.ports
init.interrupt
int-enable

